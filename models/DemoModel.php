<?
/**
 * Class DemoModel
 *
 * @property int id
 * @property string name
 * @property string type
 * @property string typeAsBool
 * @property string date
 */
class DemoModel extends DModelValidated {
	function __construct() {
		/*
		 * описать структуру полей
		 */
		$this
			->addProperty('id', 'int')
			->addProperty('name', 'string')
			->addProperty('type', 'enum', 'no,yes')
			->addProperty('typeAsBool', 'bool')
			->addProperty('date', 'datetime');
		/*
		 * задать ключевое поле (может быть только одно
		 */
		$this->keyName = 'id';
		/*
		 * задать прокси-объект для загрузки-выгрузки данных. Сама модель не содержит методов по загрузке и выгрузке данных.
		 *
		 * прокси для связи с одной таблицей:
		 */
		$this->proxy = new DModelProxyDatabase();
		$this->proxy->setTableName('tablename');
		/*
		 * можно ограничить свойства, которые надо писать и читать в БД (см. getterConversation
		 */
		$this->proxy->setFieldsRead('id,name,type,date');
		$this->proxy->setFieldsWrite('id,name,type,date');
		/*
		 * прокси для чтения и записи из нескольких связанны таблиц БД
		 */
		$this->proxy = new DModelProxyDatabaseJoins(); //todo спросить в скайпе
		$this->proxy->setTableName('tablename');
		/*
		 * прокси для чтения из БД произвольным запросом
		 */
		$this->proxy = new DModelProxyDatabaseCustom(''); //todo спросить в скайпе
	}

	/**
	 * Метод для трансформации значения модели при вызове...
	 */
	function getterConversions($field, $value) {
		if ($field == 'typeAsBool') {
			return ($this->type == 'yes');
		}
	}
	/**
	 * ... и при установке.
	 *
	 * В данном случае создали свойство typeAsBool, соответствия которому нет в таблице БД
	 * и которое транформирует свойство  type в логическое true/false
	 */
	function setterConversions($field, $value) {
		if ($field == 'typeAsBool') {
			$this->type = $value ? 'yes' : 'no';
		}
	}


	/**
	 * методы, выполняющиеся до и после обозначенных действий
	 * для валидации и пост-исполнения
	 */
	function beforeLoad()
	{
		parent::beforeLoad(); // TODO: Change the autogenerated stub
	}

	function afterLoad()
	{
		parent::afterLoad(); // TODO: Change the autogenerated stub
	}

	function beforeDelete()
	{
		parent::beforeDelete(); // TODO: Change the autogenerated stub
	}

	function afterCreate()
	{
		parent::afterCreate(); // TODO: Change the autogenerated stub
	}

	function afterDelete()
	{
		parent::afterDelete(); // TODO: Change the autogenerated stub
	}

	function afterSave()
	{
		parent::afterSave(); // TODO: Change the autogenerated stub
	}

	function beforeCreate()
	{
		parent::beforeCreate(); // TODO: Change the autogenerated stub
	}

	function beforeSave()
	{
		parent::beforeSave(); // TODO: Change the autogenerated stub
	}

}
?>